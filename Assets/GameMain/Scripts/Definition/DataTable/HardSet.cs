
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class HardSet : Luban.BeanBase
{
    public HardSet(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { if(!_buf["name"].IsString) { throw new SerializationException(); }  Name = _buf["name"]; }
        { if(!_buf["start_judge"].IsNumber) { throw new SerializationException(); }  StartJudge = _buf["start_judge"]; }
        { if(!_buf["perfect_judge"].IsNumber) { throw new SerializationException(); }  PerfectJudge = _buf["perfect_judge"]; }
        { if(!_buf["great_judge"].IsNumber) { throw new SerializationException(); }  GreatJudge = _buf["great_judge"]; }
        { if(!_buf["good_judge"].IsNumber) { throw new SerializationException(); }  GoodJudge = _buf["good_judge"]; }
        { var __json0 = _buf["point_list"]; if(!__json0.IsArray) { throw new SerializationException(); } PointList = new System.Collections.Generic.List<ComboPoint>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { ComboPoint __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = ComboPoint.DeserializeComboPoint(__e0);  }  PointList.Add(__v0); }   }
    }

    public static HardSet DeserializeHardSet(JSONNode _buf)
    {
        return new HardSet(_buf);
    }

    /// <summary>
    /// id
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 名字
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// 开始判定范围
    /// </summary>
    public readonly float StartJudge;
    /// <summary>
    /// perfect范围
    /// </summary>
    public readonly float PerfectJudge;
    /// <summary>
    /// perfect范围
    /// </summary>
    public readonly float GreatJudge;
    /// <summary>
    /// perfect范围
    /// </summary>
    public readonly float GoodJudge;
    /// <summary>
    /// 分数和combo的关系
    /// </summary>
    public readonly System.Collections.Generic.List<ComboPoint> PointList;
   
    public const int __ID__ = -1933840553;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "name:" + Name + ","
        + "startJudge:" + StartJudge + ","
        + "perfectJudge:" + PerfectJudge + ","
        + "greatJudge:" + GreatJudge + ","
        + "goodJudge:" + GoodJudge + ","
        + "pointList:" + Luban.StringUtil.CollectionToString(PointList) + ","
        + "}";
    }
}

}

